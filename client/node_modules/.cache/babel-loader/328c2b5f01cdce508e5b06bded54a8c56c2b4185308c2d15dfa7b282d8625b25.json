{"ast":null,"code":"import * as cookie from 'cookie';\nexport function hasDocumentCookie() {\n  // Can we get/set cookies on document.cookie?\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\nexport function cleanCookies() {\n  document.cookie.split(';').forEach(function (c) {\n    document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n  });\n}\nexport function parseCookies(cookies) {\n  if (typeof cookies === 'string') {\n    return cookie.parse(cookies);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\nexport function readCookie(value, options = {}) {\n  const cleanValue = cleanupCookieValue(value);\n  if (!options.doNotParse) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {\n      // At least we tried\n    }\n  }\n  // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n  return value;\n}\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n  return value;\n}","map":{"version":3,"names":["cookie","hasDocumentCookie","document","cleanCookies","split","forEach","c","replace","Date","toUTCString","parseCookies","cookies","parse","readCookie","value","options","cleanValue","cleanupCookieValue","doNotParse","JSON","e","substr"],"sources":["C:/Users/khali/OneDrive/Desktop/Projects/recipe_app/client/node_modules/universal-cookie/es6/utils.js"],"sourcesContent":["import * as cookie from 'cookie';\nexport function hasDocumentCookie() {\n    // Can we get/set cookies on document.cookie?\n    return typeof document === 'object' && typeof document.cookie === 'string';\n}\nexport function cleanCookies() {\n    document.cookie.split(';').forEach(function (c) {\n        document.cookie = c\n            .replace(/^ +/, '')\n            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n    });\n}\nexport function parseCookies(cookies) {\n    if (typeof cookies === 'string') {\n        return cookie.parse(cookies);\n    }\n    else if (typeof cookies === 'object' && cookies !== null) {\n        return cookies;\n    }\n    else {\n        return {};\n    }\n}\nexport function readCookie(value, options = {}) {\n    const cleanValue = cleanupCookieValue(value);\n    if (!options.doNotParse) {\n        try {\n            return JSON.parse(cleanValue);\n        }\n        catch (e) {\n            // At least we tried\n        }\n    }\n    // Ignore clean value if we failed the deserialization\n    // It is not relevant anymore to trim those values\n    return value;\n}\nfunction cleanupCookieValue(value) {\n    // express prepend j: before serializing a cookie\n    if (value && value[0] === 'j' && value[1] === ':') {\n        return value.substr(2);\n    }\n    return value;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,QAAQ;AAChC,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EAChC;EACA,OAAO,OAAOC,QAAQ,KAAK,QAAQ,IAAI,OAAOA,QAAQ,CAACF,MAAM,KAAK,QAAQ;AAC9E;AACA,OAAO,SAASG,YAAYA,CAAA,EAAG;EAC3BD,QAAQ,CAACF,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAUC,CAAC,EAAE;IAC5CJ,QAAQ,CAACF,MAAM,GAAGM,CAAC,CACdC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,KAAK,EAAE,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,SAAS,CAAC;EAC5E,CAAC,CAAC;AACN;AACA,OAAO,SAASC,YAAYA,CAACC,OAAO,EAAE;EAClC,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7B,OAAOX,MAAM,CAACY,KAAK,CAACD,OAAO,CAAC;EAChC,CAAC,MACI,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;IACtD,OAAOA,OAAO;EAClB,CAAC,MACI;IACD,OAAO,CAAC,CAAC;EACb;AACJ;AACA,OAAO,SAASE,UAAUA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC5C,MAAMC,UAAU,GAAGC,kBAAkB,CAACH,KAAK,CAAC;EAC5C,IAAI,CAACC,OAAO,CAACG,UAAU,EAAE;IACrB,IAAI;MACA,OAAOC,IAAI,CAACP,KAAK,CAACI,UAAU,CAAC;IACjC,CAAC,CACD,OAAOI,CAAC,EAAE;MACN;IAAA;EAER;EACA;EACA;EACA,OAAON,KAAK;AAChB;AACA,SAASG,kBAAkBA,CAACH,KAAK,EAAE;EAC/B;EACA,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/C,OAAOA,KAAK,CAACO,MAAM,CAAC,CAAC,CAAC;EAC1B;EACA,OAAOP,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}